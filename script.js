document.addEventListener('DOMContentLoaded', () => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É —Å–≤–∞–¥—å–±—ã
  const weddingDate = new Date("July 11, 2025 10:00:00").getTime();

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  const countdownTimer = setInterval(function () {
      const now = new Date().getTime();
      const timeLeft = weddingDate - now;

      if (timeLeft <= 0) {
          document.getElementById("countdown").innerHTML = "–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Å–≤–∞–¥—å–±—ã! üéâ";
          clearInterval(countdownTimer);
          return;
      }

      // –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏, —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
      const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
      const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

      document.getElementById("countdown").innerHTML = `
          –î–æ —Å–≤–∞–¥—å–±—ã –æ—Å—Ç–∞–ª–æ—Å—å: 
          <strong>${days} –¥–Ω–µ–π ${hours} —á–∞—Å–æ–≤ ${minutes} –º–∏–Ω—É—Ç ${seconds} —Å–µ–∫—É–Ω–¥</strong>
      `;
  }, 1000);

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  const fadeIns = document.querySelectorAll('.fade-in');
  const appearOnScroll = new IntersectionObserver((entries, appearOnScroll) => {
      entries.forEach(entry => {
          if (!entry.isIntersecting) return;
          entry.target.classList.add('visible');
          appearOnScroll.unobserve(entry.target);
      });
  }, { threshold: 0.5 });

  fadeIns.forEach(fadeIn => {
      appearOnScroll.observe(fadeIn);
  });
  
  document.addEventListener('DOMContentLoaded', () => {
    // –ë–ª–æ–∫ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    const fadeElements = document.querySelectorAll('.fade-in'); // –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º .fade-in

    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
                entry.target.classList.remove('fade-out');
            } else {
                const rect = entry.boundingClientRect;
                const screenHeight = window.innerHeight;

                if (rect.top < screenHeight * 0.7) {
                    const visibilityFactor = (screenHeight - rect.top) / (screenHeight * 0.3);
                    const opacity = Math.max(0, visibilityFactor);
                    entry.target.style.opacity = opacity.toString();
                    entry.target.style.transform = `translateY(${(1 - opacity) * 20}px)`;
                }
            }
        });
    }, { threshold: [0, 1] });

    fadeElements.forEach(element => {
        observer.observe(element);
    });

    // –ë–ª–æ–∫ –¥–ª—è —Å—Ç—Ä–µ–ª–∫–∏ —Å–∫—Ä–æ–ª–ª–∞
    const scrollArrow = document.querySelector('.scroll-arrow');
    let lastScrollPosition = 0;
    let isAtBottom = false;

    function checkScrollPosition() {
        const scrollTop = window.scrollY;
        const windowHeight = window.innerHeight;
        const documentHeight = document.documentElement.scrollHeight;

        if (scrollTop + windowHeight >= documentHeight - 10) {
            scrollArrow.style.opacity = '0';
            scrollArrow.style.pointerEvents = 'none';
            isAtBottom = true;
        } else {
            scrollArrow.style.opacity = '0.8';
            scrollArrow.style.pointerEvents = 'auto';
            isAtBottom = false;
        }

        lastScrollPosition = scrollTop;
    }

    window.addEventListener('scroll', () => {
        checkScrollPosition();
    });

    let timeoutId;
    function resetTimeout() {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => {
            if (!isAtBottom) {
                scrollArrow.style.opacity = '0';
                scrollArrow.style.pointerEvents = 'none';
            }
        }, 10000);
    }

    window.addEventListener('scroll', resetTimeout);
    window.addEventListener('mousemove', resetTimeout);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    checkScrollPosition();
    resetTimeout();
});


  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
  const form = document.getElementById('guest-form');
  form.addEventListener('submit', (e) => {
      e.preventDefault();

      const name = form.querySelector('#name').value.trim();
      const attendance = form.querySelector('input[name="attendance"]:checked');
      const food = form.querySelector('input[name="food"]:checked');

      if (!name || !attendance || !food) {
          alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!');
          return;
      }

      const formData = new FormData(form);
      const data = {};
      formData.forEach((value, key) => {
          data[key] = value;
      });

      console.log(data); // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      alert('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É!');
      form.reset();
  });
});